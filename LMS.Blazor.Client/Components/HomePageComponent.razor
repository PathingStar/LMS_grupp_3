@using System.Security.Claims
@rendermode InteractiveWebAssembly
@inject NavigationManager nav

<AuthorizeView Roles="Teacher, Student">
    <Authorized>
        @if (isTeacher)
        {
            <section class="p-4 bg-light rounded shadow-sm">
                <header class="mb-3">
                    <small class="text-muted">Teacher Dashboard</small><br />
                    <small class="text-primary">Welcome, @userName!</small>
                </header>
            <article>
                <p class="lead">Here’s what’s happening today:</p>
                @if (Modules != null && Modules.Count() > 0)
                {
                    foreach (ModuleDto item in Modules)
                    {
                            <small class="text-muted">@item.Name - @item.StartDate.ToShortDateString() - @item.EndDate.ToShortDateString()</small>
                            <br />
                        foreach (ModuleActivityDto activityDto in item.ModuleActivities)
                        {
                                <small class="ml-4">@GetActivityTypeName(@activityDto.ActivityTypeId) @activityDto.Name - @activityDto.StartDate.ToShortTimeString() - @activityDto.EndDate.ToShortTimeString()</small>
                             <br />
                        }
                    }
                }
            </article>
            </section>

        }
        else if (isStudent)
        {
            <section class="p-4 bg-light rounded shadow-sm">
                <header class="mb-3">
                    <small class="text-muted"   >Student Dashboard</small><br/>
                    <small class="text-primary">Welcome, @userName!</small><br />
                    <small class="text-muted">Courseid:@courseIdAsString</small>
                </header>
            <article>
                <p class="lead">Here’s what’s happening today:</p>
                    @if (Modules != null && Modules.Count() > 0)
                    {
                        foreach (ModuleDto item in Modules)
                        {
                          foreach (ModuleActivityDto activityDto in item.ModuleActivities)
                            {
                                <small class="card-hover" @onclick="Toggle">@GetActivityTypeName(@activityDto.ActivityTypeId)  @activityDto.Name - @activityDto.StartDate.ToShortTimeString() - @activityDto.EndDate.ToShortTimeString()</small>
                                <br />
                                @if (isEditing)
                                {
                                    <SubmissionAddComponent OnUploadSuccess="HandleUploadSuccess" />
                                }
                            }
                        }
                    }
                    <p class="lead mt-3 pt-3">Entered submissions:</p>
                    @if (Submissions != null && Submissions.Count() > 0)
                    {
                        foreach (SubmissionDto item in Submissions)
                        {
                            <small>@item.SubmissionDate.ToShortDateString() @item.SubmissionDate.ToShortTimeString() @item.DocumentDto?.Name </small>
                                <br />
                        }
                    }

                </article>
            </section>


        }
    </Authorized>
    <NotAuthorized>
        <h3>You are not authorized - please log in.</h3>
    </NotAuthorized>
</AuthorizeView>

@code 
{
    [Inject]
    private IApiService myApi { get; set; } = default!;
    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private IEnumerable<ModuleDto>? Modules { get; set; }
    private IEnumerable<SubmissionDto>? Submissions { get; set; }
    public List<ActivityTypeDto> Types { get; set; } = new List<ActivityTypeDto>();

    private bool isTeacher;
    private bool isStudent;
    private bool isLoading;
    private string? userName;
    string? courseIdAsString;
    private string? UserId;

    Guid? currentlyEditing;
    bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity?.Name;
        if (!user.Identity.IsAuthenticated || user==null) return;

        UserId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;


        courseIdAsString = user.FindFirst("CourseId")?.Value;

        isLoading = true;

        isTeacher = user.IsInRole("Teacher");
        isStudent = user.IsInRole("Student");

        await LoadActivities(courseIdAsString);
        await LoadSubmissions(UserId);

        isLoading = false;
    }

    private async Task LoadSubmissions(string UserId)
    {
        if (!isStudent) return;
        Submissions = await myApi.CallApiGetAsync<IEnumerable<SubmissionDto>>($"submissions/user/{UserId}");
    }

    private async Task LoadActivities(string? courseIdAsString)
    {
        try
        {
            DateTime idag = DateTime.UtcNow;
            string timeString = idag.ToString("yyyy-MM-dd");
            if (isStudent )
            {
                if (courseIdAsString != null && courseIdAsString.Length > 0)
                {
                    if (Guid.TryParse(courseIdAsString, out var courseId))
                    {
                        Console.WriteLine(courseId);
                        Modules = await myApi.CallApiGetAsync<IEnumerable<ModuleDto>>($"modules/course/{courseId}/today/{timeString}");
                    }

                }

            }
            else if(isTeacher)
            {
                Modules = await myApi.CallApiGetAsync<IEnumerable<ModuleDto>>($"modules/today/{timeString}");
            }

            Types = (await myApi.CallApiGetAsync<List<ActivityTypeDto>>("activity-types"));

        }
        catch (Exception ex)
        {
            Console.WriteLine("there was an error: " + ex.Message);
        }


    }

    public string GetActivityTypeName(int activityTypeId)
    {
        return Types.FirstOrDefault(t => t.Id == activityTypeId)?.Name ?? "  ";

    }
    private void Toggle()
    {
        isEditing = !isEditing;
    }
    /*
    private void Toggle(Guid ajdi)
    {
        if (ajdi == currentlyEditing)
        {
            currentlyEditing = null;
            return;
            }
        currentlyEditing = ajdi;

        }
    */


    private async Task HandleUploadSuccess(DocumentDto doc)
    {
        LoadSubmissions(doc.UploaderId);
        //DocumentDtos.Add(doc);
        StateHasChanged();
    }


}

