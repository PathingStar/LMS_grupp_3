@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
<div class="container mt-4">
	<EditForm class="form" Model="@ModuleUpdDto" OnValidSubmit="@HandleValidSubmit" FormName="EditModel">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div>
			<p>@Module.Id</p>
		</div>
		<div>
			<InputText class="form-control" @bind-Value="@ModuleUpdDto.Name" id="name" placeholder="Name" />
			<ValidationMessage For="@(() => ModuleUpdDto.Name)" />
		</div>
		<div>
			<InputDate class="form-control" @bind-Value="@ModuleUpdDto.StartDate" id="Start" placeholder="Start" />
			<ValidationMessage For="@(() => ModuleUpdDto.StartDate)" />
		</div>
		<div>
			<InputDate class="form-control" @bind-Value="@ModuleUpdDto.EndDate" id="End" placeholder="End" />
			<ValidationMessage For="@(() => ModuleUpdDto.Name)" />
		</div>
		<button type="cancel" class="btn btn-primary" @onclick="StopEditing">Cancel</button>
		<button type="submit" class="btn btn-primary">Save</button>
		

	</EditForm>

</div>

@code {
	[Inject]
	private IApiService myApi { get; set; } = default!;

	[Parameter]
	public ModuleDto Module { get; set; }

	[Parameter]
	public Guid currentCourseId { get; set; }

	[Parameter]
	public EventCallback<ModuleDto> OnEditDone { get; set; }

	public ModuleUpdateDto ModuleUpdDto { get; set; }

	protected override async Task OnInitializedAsync()
	{
		//await base.OnInitializedAsync();
		ModuleUpdDto = new ModuleUpdateDto
		{
			Id = Module.Id,
			//			CourseId = Guid.Parse( currentCourseId ),
			CourseId = currentCourseId,
			Name = Module.Name,
			Description = Module.Description,
			StartDate = Module.StartDate,
			EndDate = Module.EndDate
		};


	}


	private async Task StopEditing()
	{
		await OnEditDone.InvokeAsync(Module);
	}





	private async Task HandleValidSubmit()
	{
		Module = await myApi.CallApiPutAsync<ModuleUpdateDto, ModuleDto>($"modules/{Module.Id}", ModuleUpdDto);
		Console.WriteLine($"Course '{ModuleUpdDto.Name}' saved successfully!");
		StopEditing();
	}


}
