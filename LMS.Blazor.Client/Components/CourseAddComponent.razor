@if (!isAdding)
{
	<div class="container mt-4">
		<div class="card shadow-sm text-center card-hover" style="cursor:pointer;" @onclick="Toggle">
			<div class="card-body">
				<h5 class="card-title">＋</h5>
				<p class="card-text">New course</p>
			</div>
		</div>
	</div>
}
else
{
	<h3 style="text-align: center">New course:</h3>
	<div class="container mt-4">
		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<div class="alert alert-danger" role="alert">
				<p>@errorMessage</p>
			</div>
		}
		<div class="card shadow-sm">
			<div class="card-body">
				<EditForm Model="@Course" OnValidSubmit="@(() => HandleValidSubmit())">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="mb-3">
						<label for="courseName" class="form-label">Course Name</label>
						<InputText id="courseName" class="form-control" @bind-Value="Course.Name" />
						<ValidationMessage For="@(() => Course.Name)" />
					</div>
					<div class="mb-3">
						<label for="courseDescription" class="form-label">Description</label>
						<InputTextArea id="courseDescription" class="form-control" @bind-Value="Course.Description" />
						<ValidationMessage For="@(() => Course.Description)" />
					</div>
					<div class="mb-3">
						<label for="courseStartDate" class="form-label">Start Date</label>
						<InputDate id="courseStartDate" class="form-control" @bind-Value="Course.StartDate" />
						<ValidationMessage For="@(() => Course.StartDate)" />
					</div>
					<div class="mb-3">
						<label for="courseEndDate" class="form-label">End Date</label>
						<InputDate id="courseEndDate" class="form-control" @bind-Value="Course.EndDate" />
						<ValidationMessage For="@(() => Course.EndDate)" />
					</div>
					<button type="submit" class="btn btn-primary">Add</button> <button type="button" class="btn btn-primary" @onclick=Toggle>Cancel</button>
				</EditForm>
			</div>
		</div>
	</div>
}


@code {
	public CourseCreateDto Course { get; set; } = new CourseCreateDto();
	private bool isAdding = false;
	private string? errorMessage;


	[Inject]
	private IApiService myApi { get; set; } = default!;

    // Added EventCallback to notify parent component when a new course is added
	[Parameter]
    public EventCallback<CourseDto> OnCourseAdded { get; set; }

	private async Task HandleValidSubmit()
	{
		try
		{
			var newCourseDto = await myApi.CallApiPostAsync<CourseCreateDto, CourseDto>("courses", Course);

			Console.WriteLine($"Course '{Course.Name}' saved successfully!");

			// Added to notify parent component
			await OnCourseAdded.InvokeAsync(newCourseDto);

			Course = new CourseCreateDto();
		}
		catch (System.ComponentModel.DataAnnotations.ValidationException ex)
		{
			errorMessage = $"API Error:  - {ex.Message}";
			Console.WriteLine(ex.Message);
			StateHasChanged();
		}

	}

	private void Toggle() => isAdding = !isAdding;
}
