@using LMS.Shared.DTOs.EntityDto
@inject NavigationManager Nav

<div class="container mt-4">
    <h4 style="text-align: center">Documents</h4>
    <table class="table table-hover table-sm align-middle" style="table-layout: fixed; width: 100%;">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Uploader</th>
                <th scope="col">Uploaded</th>
                <th scope="col" style="width: 80px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Documents == null || Documents.Count == 0)
            {
                <tr>
                    <td colspan="4" class="text-center">No documents available.</td>
                </tr>
            }
            else
            {
                @foreach (var Doc in Documents)
                {
                    <tr>
                        @{
                            var DocName = Doc.Name.Length > 11 ? Doc.Name.Substring(0, 10) + "..." : Doc.Name;
                        }
                        <td title="@Doc.Name">@DocName</td>
                        <td>@(string.IsNullOrWhiteSpace(Doc.UploaderName) ? "Name N." : Doc.UploaderName)</td>
                        <td>@Doc.UploadDate.ToString("m")</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditClicked(Doc.Id)" title="Edit">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => DownloadClicked(Doc.Id)" title="Download">
								<i class="bi bi-download"></i> Download
							</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public List<DocumentDto> Documents { get; set; } = new();

    [Parameter]
    public EventCallback<Guid> OnEditRequested { get; set; }

    private async Task EditClicked(Guid documentId)
    {
        if (OnEditRequested.HasDelegate)
        {
            await OnEditRequested.InvokeAsync(documentId);
        }
    }
    private void DownloadClicked(Guid documentId)
    {
		var documentIdstring = documentId.ToString();
        var url = Nav.ToAbsoluteUri($"/proxy?endpoint=documents/{documentIdstring}/download");
        Nav.NavigateTo(url.ToString(), forceLoad: true);
	}
}






@* @using LMS.Shared.DTOs.EntityDto
<div class="container mt-4">
	<h4 style="text-align: center">Documents</h4>
	<table class="table table-hover table-sm align-middle" style="table-layout: fixed; width: 100%;">
		<thead>
			
			<tr>
				<th scope="col">Name</th>
				<th scope="col">Uploader</th>
				<th scope="col">Uploaded</th>
			</tr>
		</thead>
		<tbody>
			@if (Documents == null || Documents.Count == 0)
			{
				<tr>
					<td colspan="2" class="text-center">No documents available.</td>
				</tr>

			}
			else foreach (var Doc in Documents)
				{
					<tr>
						@{
							var DocName = Doc.Name.Length > 11 ? Doc.Name.Substring(0,10) + "..." : Doc.Name;
						}
					
					<td>@DocName</td>
					<td>Name N.</td>
					<td>@Doc.UploadDate.ToString("m")</td>
				</tr>
			}
		</tbody>
	</table>
</div>


@code {

	[Parameter]
	public List<DocumentDto> Documents { get; set; }

}
 *@