@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using System.Security.Claims
@using LMS.Blazor.Client.Models
@inject IApiService ApiService
@if (!isAdding)
{
	<div class="container mt-4">
		<div class="card shadow-sm text-center card-hover" style="cursor:pointer;" @onclick="Toggle">
			<div class="card-body">
				<h5 class="card-title">＋</h5>
				<p class="card-text">New activity</p>
			</div>
		</div>
	</div>
}
else
{
	<h3 style="text-align: center">New activity:</h3>
	<div class="container mt-4">
		@if (!string.IsNullOrEmpty(errorMessage))
		{
			<div class="alert alert-danger" role="alert">
				<p>@errorMessage</p>
			</div>
		}
		<div class="card shadow-sm">
			<div class="card-body">
				@page "/module-activities/add"
				@inject IApiService ApiService
				@using Microsoft.AspNetCore.Components.Forms
			@using System.Security.Claims

			<h3>Add Module Activity</h3>

				<EditForm Model="@ActivityModel" OnValidSubmit="@HandleSubmit">
					<DataAnnotationsValidator />
					<ValidationSummary />

					<div class="mb-3">
						<label>Name</label>
						<InputText @bind-Value="ActivityModel.Name" class="form-control" />
					</div>

					<div class="mb-3">
						<label>Activity Date</label>
						<InputDate @bind-Value="ActivityDate" class="form-control" />
					</div>

					<div class="mb-3">
						<label>Start Time</label>
						<InputText type="time" @bind-Value="StartTimeString" class="form-control" placeholder="HH:mm" />
					</div>

					<div class="mb-3">
						<label>End Time</label>
						<InputText type ="time" @bind-Value="EndTimeString" class="form-control" placeholder="HH:mm" />
					</div>

					<div class="mb-3">
						<label>Activity Type</label>
						<InputSelect @bind-Value="ActivityModel.ActivityTypeId" class="form-select">
							<option value="">-- Select --</option>
						@foreach (var t in Types)
							{
								<option value="@t.Id">@t.Name</option>
							}
						</InputSelect>
					</div>

					<h4>Assignments</h4>
					@for (int i = 0; i < Assignments.Count; i++)
					{
						<AssignmentAddComponent Assignment="Assignments[i]" OnDocumentsAdded="HandleDocumentsAdded" />
					}
					<button type="button" class="btn btn-secondary" @onclick="AddAssignment">Add Assignment</button>

					<br /><br />
					<button type="submit" class="btn btn-primary">Submit Activity</button>
				</EditForm>
			</div>
		</div>
	</div>
}

@code{
	[Parameter] public Guid ModuleId { get; set; }
	[CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; }
	private bool isAdding = false;

	private ModuleActivityCreateDto ActivityModel = new();
	private List<AssignmentFormModel> Assignments = new();
	private List<DocumentInfo> AllDocsToUpload = new();
	private List<ActivityTypeDto> Types = new();
	private string? errorMessage;

	private DateTime _activityDate = DateTime.Today;
	private DateTime ActivityDate
	{
		get => _activityDate;
		set
		{
			_activityDate = value;
			// Preserve times when date changes
			var startTime = ActivityModel.StartDate.TimeOfDay;
			var endTime = ActivityModel.EndDate.TimeOfDay;

			ActivityModel.StartDate = value.Date + startTime;
			ActivityModel.EndDate = value.Date + endTime;
		}
	}

	public string StartTimeString
	{
		get => ActivityModel.StartDate.ToString("HH:mm");
		set
		{
			if (TimeSpan.TryParse(value, out var ts))
			{
				ActivityModel.StartDate = ActivityDate.Date + ts;
			}
		}
	}

	public string EndTimeString
	{
		get => ActivityModel.EndDate.ToString("HH:mm");
		set
		{
			if (TimeSpan.TryParse(value, out var ts))
			{
				ActivityModel.EndDate = ActivityDate.Date + ts;
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			Types = await ApiService.CallApiGetAsync<List<ActivityTypeDto>>("activity-types");
		}
		catch (HttpRequestException apiEx)
		{
			errorMessage = $"API Error: {apiEx.StatusCode} - {apiEx.Message}";
			Console.WriteLine("there was an API error: " + apiEx.Message);
		}

	}

	private void AddAssignment()
	{
		Assignments.Add(new AssignmentFormModel());
	}

	private void HandleDocumentsAdded(AssignmentFormModel assignment)
	{
		foreach (var doc in assignment.Documents)
		{
			if (!AllDocsToUpload.Any(d => d.TempId == doc.TempId))
				AllDocsToUpload.Add(doc);
		}
	}

	private async Task HandleSubmit()
	{
		var authState = await AuthStateTask;
		var user = authState.User;
		string? uploaderId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		// Build shared DTOs
		ActivityModel.ModuleId = ModuleId;
		ActivityModel.Assignments = Assignments.Select(a => new AssignmentCreateDto
		{
			Name = a.Name,
			Description = a.Description,
			DueDate = a.DueDate,
			Documents = a.Documents.Select(d => new DocumentMetadataDto
			{
				TempId = d.TempId,
				Name = d.FileName,
				Description = d.Description,
				UploaderId = uploaderId,
				FileType = d.FileType
			}).ToList()
		}).ToList();

		// Prepare Multipart
		using var content = new MultipartFormDataContent();
		var json = JsonSerializer.Serialize(ActivityModel);
		content.Add(new StringContent(json, Encoding.UTF8, "application/json"), "activityDtoJson");
		Console.WriteLine(json);

		foreach (var doc in AllDocsToUpload)
		{
			var fileContent = new ByteArrayContent(doc.Content);
			fileContent.Headers.ContentType = new MediaTypeHeaderValue(doc.ContentType);
			content.Add(fileContent, doc.TempId, doc.FileName);
		}

		try
		{
			var result = await ApiService.CallApiPostMultipartAsync<ModuleActivityDto>("activities/with-documents", content);
		}
		catch (System.ComponentModel.DataAnnotations.ValidationException ex)
		{
			errorMessage = $"API Error:  {ex.Message}";
			Console.WriteLine("there was an API error: " + ex.Message);
		}

		// Reset
		ActivityModel = new ModuleActivityCreateDto();
		Assignments.Clear();
		AllDocsToUpload.Clear();
	}
	private void Toggle() => isAdding = !isAdding;
}
