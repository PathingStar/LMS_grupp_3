@if (!isAdding)
{
	<div class="container mt-4">
		<div class="card shadow-sm text-center card-hover" style="cursor:pointer;" @onclick="Toggle">
			<div class="card-body">
				<h5 class="card-title">＋</h5>
				<p class="card-text">New activity</p>
			</div>
		</div>
	</div>
}
else
{
	<h3 style="text-align: center">New activity:</h3>
	<div class="container mt-4">

		<div class="card shadow-sm">
			<div class="card-body">
				<EditForm Model="@Activity" OnValidSubmit="@(() => HandleValidSubmit())">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="mb-3">
						<label for="activityName" class="form-label">Activity Name</label>
						<InputText id="activityName" class="form-control" @bind-Value="Activity.Name" />
						<ValidationMessage For="@(() => Activity.Name)" />
					</div>
					<div class="mb-3">
						<label for="category" class="form-label">Category</label>
						<InputSelect id="category" class="form-select" @bind-Value="Activity.ActivityTypeId">
							<option value="">-- Select Category --</option>
							@foreach (var type in Types)
							{
								<option value="@type.Id">@type.Name</option>
							}
						</InputSelect>
						<ValidationMessage For="@(() => Activity.ActivityTypeId)" />
					</div>
					<div class="mb-3">
						<label for="activityDescription" class="form-label">Description</label>
						<InputTextArea id="courseDescription" class="form-control" @bind-Value="Activity.Description" />
						<ValidationMessage For="@(() => Activity.Description)" />
					</div>
					<div>
						<label for="courseDate" class="form-label">Date</label>
						<InputDate id="activityEndDate" class="form-control" @bind-Value="Activity.StartDate" />
						<ValidationMessage For="@(() => Activity.StartDate)" />
					</div>
					<div class="mb-3">
						<label for="courseEndDate" class="form-label">Start Time</label>
						<InputText type="time" id="activityEndDate" class="form-control" @bind-Value="StartTimeString" />
						<ValidationMessage For="@(() => StartTimeString)" />
					</div>
					<div class="mb-3">
						<label for="courseEndDate" class="form-label">End Time</label>
						<InputText  type="time" id="activityEndDate" class="form-control" @bind-Value="EndTimeString" />
						<ValidationMessage For="@(() => EndTimeString)" />
					</div>
					<button type="submit" class="btn btn-primary">Add</button> <button type="button" class="btn btn-primary" @onclick=Toggle>Cancel</button>
				</EditForm>
			</div>
		</div>
	</div>
}


@code {
	[Parameter]
	public Guid ModuleId { get; set; }
	
	public ModuleActivityCreateDto Activity { get; set; } = new ModuleActivityCreateDto();
	public List<ActivityTypeDto> Types { get; set; }
	private bool isAdding = false;

	[Inject]
	private IApiService myApi { get; set; } = default!;

	public string StartTimeString
	{
		get => Activity.StartDate.ToString("HH:mm");
		set
		{
			if (TimeSpan.TryParse(value, out var ts))
			{
				Activity.StartDate = Activity.StartDate.Date + ts;
			}
		}
	}
	public string EndTimeString
	{
		get => Activity.EndDate.ToString("HH:mm");
		set
		{
			if (TimeSpan.TryParse(value, out var ts))
			{
				Activity.EndDate = Activity.EndDate.Date + ts;
			}
		}
	}

	private async Task HandleValidSubmit()
	{
		Activity.ModuleId = ModuleId;
		var newCourseDto = await myApi.CallApiPostAsync<ModuleActivityCreateDto, ModuleActivityDto>("activities", Activity);
		Toggle();
	}

	protected override async Task OnInitializedAsync()
	{
		Types = (await myApi.CallApiGetAsync<List<ActivityTypeDto>>("activity-types"));
	}

	private void Toggle() => isAdding = !isAdding;
}
