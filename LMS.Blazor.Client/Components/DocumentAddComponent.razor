@using LMS.Blazor.Client.Models
@using System.Security.Claims

<EditForm Model="@DocumentInfo" OnValidSubmit=OnFileSubmit>
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label for="document">Document</label>
		<InputFile id="document" class="form-control" onchange="OnFileSelected" />
	</div>
	<div class="form-group">
		<label for="description">Description</label>
		<InputTextArea id="description" class="form-control" @bind-Value="DocumentInfo.Description" />
	</div>
	<button type="submit" class="btn btn-primary">Add Document</button>
</EditForm>

@code {

	[Parameter]
	public Guid ParentId { get; set; }
	[Parameter]
	public string ParentType { get; set; }

	[CascadingParameter] 
	private Task<AuthenticationState> AuthStateTask { get; set; }
	private string? UploaderId;

	[Inject]
	IApiService ApiService { get; set; }

	private DocumentInfo DocumentInfo = new ();

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateTask;
		var user = authState.User;
		if (user.Identity.IsAuthenticated)
		{
			UploaderId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
		}
	}

	private void OnFileSelected(InputFileChangeEventArgs e)
	{
		DocumentInfo.File = e.File;
	}

	private async Task OnFileSubmit()
	{
		if (DocumentInfo.File == null)
			return;

		using var content = new MultipartFormDataContent();

		var fileContent = new StreamContent(DocumentInfo.File.OpenReadStream(maxAllowedSize: 10_000_000));
		fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(DocumentInfo.File.ContentType);
		content.Add(fileContent, "File", DocumentInfo.File.Name);
		content.Add(new StringContent(DocumentInfo.File.Name), "Name");
		content.Add(new StringContent(DocumentInfo.Description ?? string.Empty), "Description");
		content.Add(new StringContent(ParentId.ToString()), "ParentId");
		content.Add(new StringContent(ParentType), "ParentType");
		content.Add(new StringContent(UploaderId), "UploaderId");
		content.Add(new StringContent(DocumentInfo.File.ToString()), "File");

		Console.WriteLine($"UploaderId: {UploaderId}");
		Console.WriteLine($"ParentId: {ParentId}");
		Console.WriteLine($"ParentType: {ParentType}");
		Console.WriteLine($"FileName: {DocumentInfo.File.Name}");
		Console.WriteLine($"Description: {DocumentInfo.Description}");
		Console.WriteLine($"FileContentType: {DocumentInfo.File.ContentType}");
		Console.WriteLine($"FileSize: {DocumentInfo.File.Size}");


		var response = await ApiService.CallApiPostMultipartAsync<DocumentDto>("documents", content);

		if(response != null)
		{
			// Handle success (e.g., show a message, clear the form, etc.)
			Console.WriteLine("Document uploaded successfully.");
		}
		else
		{
			// Handle error (e.g., show an error message)
			Console.WriteLine("Error uploading document");
		}
	}
}
