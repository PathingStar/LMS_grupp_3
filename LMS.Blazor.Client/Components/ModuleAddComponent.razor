@if (!isAdding)
{
	<div class="container mt-4">
		<div class="card shadow-sm text-center card-hover" style="cursor:pointer;" @onclick="Toggle">
			<div class="card-body">
				<h5 class="card-title">＋</h5>
				<p class="card-text">New module</p>
			</div>
		</div>
	</div>
}
else
{
	<h3 style="text-align: center">New course:</h3>
	<div class="container mt-4">

		<div class="card shadow-sm">
			<div class="card-body">
				<EditForm Model="@Module" OnValidSubmit="@(() => HandleValidSubmit())">
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="mb-3">
						<label for="moduleName" class="form-label">Module Name</label>
						<InputText id="moduleName" class="form-control" @bind-Value="Module.Name" />
						<ValidationMessage For="@(() => Module.Name)" />
					</div>
					<div class="mb-3">
						<label for="moduleDescription" class="form-label">Description</label>
						<InputTextArea id="moduleDescription" class="form-control" @bind-Value="Module.Description" />
						<ValidationMessage For="@(() => Module.Description)" />
					</div>
					<div class="mb-3">
						<label for="moduleStartDate" class="form-label">Start Date</label>
						<InputDate id="moduleStartDate" class="form-control" @bind-Value="Module.StartDate" />
						<ValidationMessage For="@(() => Module.StartDate)" />
					</div>
					<div class="mb-3">
						<label for="moduleEndDate" class="form-label">End Date</label>
						<InputDate id="moduleEndDate" class="form-control" @bind-Value="Module.EndDate" />
						<ValidationMessage For="@(() => Module.EndDate)" />
					</div>
					<button type="submit" class="btn btn-primary">Add</button> <button type="button" class="btn btn-primary" @onclick=Toggle>Cancel</button>
				</EditForm>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]	public Guid CourseId { get; set; }

	[Parameter] public EventCallback<ModuleDto> OnModuleAdded { get; set; }

	[Inject] private IApiService myApi { get; set; } = default!;

	public ModuleCreateDto Module { get; set; } = new ModuleCreateDto();

	private bool isAdding = false;

	private void Toggle() => isAdding = !isAdding;

	private async Task HandleValidSubmit()
	{
		Module.CourseId = CourseId;
		var newModule = await myApi.CallApiPostAsync<ModuleCreateDto, ModuleDto>("modules", Module);

		if (newModule != null)
		{
            await OnModuleAdded.InvokeAsync(newModule);
		}

        Toggle();
        Module = new ModuleCreateDto();
	}	
}
