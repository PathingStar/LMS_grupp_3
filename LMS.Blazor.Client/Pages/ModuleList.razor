@page "/modules"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
@attribute [Authorize]
<h3>ModuleList</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <p>@errorMessage</p>
    </div>
}
@if (Loading)
{
    <p>Loading modules...</p>
}
else
{
    @if (Modules != null)
    {
        @foreach (var module in Modules)
        {
            <ModuleComponent Module=module />
        }
    }
    else
    {
        <p>Loading modules...</p>
    }

}
@* 
<p>LIST ALL MODULES HERE PLS SENPAI</p>
<ModuleComponent />
<ModuleComponent />
<ModuleComponent 
 *@
@code {
    public bool Loading { get; set; } = true;

    [Inject]
    private IApiService myApi { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider Auth { get; set; } = default!;

    private IEnumerable<ModuleDto>? Modules { get; set; }
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {

        var state = await Auth.GetAuthenticationStateAsync();
		var user = state.User;
        var isTeacher = user.IsInRole("Teacher");
        var isStudent = user.IsInRole("Student");
        if (isTeacher)
        {
            await LoadModule();
            Loading = false;
        }
        else if (isStudent)
        {
            var courseIdAsString = user.FindFirst("CourseId")?.Value ?? null;
            if (courseIdAsString != null) await InvokeAsync(() => Navigation.NavigateTo($"courses/{courseIdAsString}"));
        }
        else
        {
            await InvokeAsync(() => Navigation.NavigateTo("/account/login"));
        }
        if (!(state.User.Identity?.IsAuthenticated) ?? false)
        {
            return;
        }
        

    }

    private async Task LoadModule()
    {
        try
        {
            Loading = true;

            var response = await myApi.CallApiGetAsync<IEnumerable<ModuleDto>>("modules");
            Modules = response?.ToList();

            Loading = false;

        }
        catch (HttpRequestException apiEx)
        {
            errorMessage = $"API Error: {apiEx.StatusCode} - {apiEx.Message}";
            Console.WriteLine("there was an API error: " + apiEx.Message);
        }
        catch (Exception ex)
        {
            Loading = false;

        }
    }

}
