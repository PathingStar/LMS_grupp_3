@page "/assignments/{Id:guid}"
@inject IApiService ApiService
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Auth
<h3>Assignment</h3>
@if(string.IsNullOrEmpty(errorMessage))
{
	<p>@errorMessage</p>
}
@if (AssignmentDto == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="card">
		<div class="card-body">
			<h5 class="card-title">@AssignmentDto.Name</h5>
			<p class="card-text">@AssignmentDto.Description</p>
			<p class="card-text"><strong>Due Date:</strong> @AssignmentDto.DueDate.ToString("f")</p>
		</div>
	</div>
	if(isTeacher)
	{
		<SubmissionComponent Submissions=SubmittedAssignments/>
	}
	else
	{
		<SubmissionAddComponent AssignmentId="@Id" />
	}
	
}

@code {
	[Parameter]
	public Guid Id { get; set; }

	private AssignmentDto? AssignmentDto;
	private List<SubmissionDto> SubmittedAssignments = new List<SubmissionDto>();
	private string? errorMessage;

	private bool isTeacher;

	protected override async Task OnParametersSetAsync()
	{
		var auth = await Auth.GetAuthenticationStateAsync();
		var user = auth.User;
		if (!(user.Identity?.IsAuthenticated ?? false))
		{
			Navigation.NavigateTo("authentication/login");
			return;
		}

		isTeacher = user.IsInRole("Teacher");


		await LoadAssignment();
	}
	private async Task LoadAssignment()
	{
		try
		{
			AssignmentDto = await ApiService.CallApiGetAsync<AssignmentDto>($"assignments/{Id}");
			if (isTeacher)
			{
				SubmittedAssignments = await ApiService.CallApiGetAsync<List<SubmissionDto>>($"submissions/assignment/{Id}");
				if(SubmittedAssignments == null)
				{
					SubmittedAssignments = new List<SubmissionDto>();
				}
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
		}

	}

}
