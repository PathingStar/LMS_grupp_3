@page "/modules/{Id}"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveWebAssembly

@attribute [Authorize]

<div class="container-fluid">
	<div class="row">
		<!-- Main content area -->
		<div class="col-12 col-lg-9">
			<h3>Module @Id</h3> @* Later bind this to Module.Name *@
			<p>Main module details go here...</p>
			<div class="row">
				<div class="col-12 col-lg-9">
					<h4>Documents</h4> @* This line should probably be in the doc component *@
					
					
						<DocumentComponent Documents = "@DocumentDtos"/>
					
				</div>
			</div>
		</div>
		<!-- Sidebar area -->
		<div class="col-12 col-lg-3 border-start bg-light">
			<div class="p-3 sticky-top">
				@if (ModuleActivities != null)
				{
					@foreach (var moduleact in ModuleActivities)
					{
						<ActivityComponent Activity=moduleact />
					}
				}
@* 
				<ActivityComponent />
				<ActivityComponent />
				<ActivityComponent />
				<ActivityComponent />
				<ActivityComponent />
 *@
			</div>
		</div>
	</div>
</div>

@code {
	[SupplyParameterFromQuery]
	[Parameter]
	public string Id { get; set; }

	public bool Loading { get; set; } = true;

    [Inject]
    private IApiService myApi { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider Auth { get; set; } = default!;

	private ModuleDto? CurrentModule { get; set; }

    private IEnumerable<ModuleActivityDto>? ModuleActivities { get; set; }
	private List<DocumentDto>? DocumentDtos { get; set; } = new List<DocumentDto>();

    protected override async Task OnInitializedAsync()
    {

        var state = await Auth.GetAuthenticationStateAsync();

        if (!(state.User.Identity?.IsAuthenticated) ?? false)
        {
            return;
        }
        await LoadModule();

    }

	private async Task LoadModule()
	{
		try
		{
			Loading = true;

			var response = await myApi.CallApiAsync<ModuleDto?>($"modules/{Id}");
			CurrentModule = (ModuleDto)response;

			var respAct = await myApi.CallApiAsync<IEnumerable<ModuleActivityDto>>($"activities/module/{Id}");
			ModuleActivities = respAct?.ToList();

			var respDocs = await myApi.CallApiAsync<IEnumerable<DocumentDto>>($"documents/Module/{Id}");
			DocumentDtos = respDocs?.ToList();


			Loading = false;

		}
		catch (Exception ex)
		{
			Loading = false;

		}
	}

}
