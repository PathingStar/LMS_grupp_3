@page "/courses"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveWebAssembly

<h3>CourseList</h3>


@if (Courses != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Description</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var course in Courses)
			{
				<tr>
					<td>@course.Name</td>
					<td>@course.Description</td>
					<td>
						<ConfirmDelete Title="Delete Course"
									   Message="Are you sure you want to delete this course?"
									   OnConfirm="() => DeleteCourse(course)"
									   ButtonText="Delete Course" />
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code
{
	public bool Loading { get; set; } = true;

	private bool isAdding = false;

	[Inject]
	private IApiService myApi { get; set; } = default!;

	[Inject]
	private AuthenticationStateProvider Auth { get; set; } = default!;

    
	private List<CourseDto>? Courses { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var isTeacher = user.IsInRole("Teacher");
		var isStudent = user.IsInRole("Student");
		if (isTeacher)
		{
			await LoadCourse();
			Loading = false;
		}
		else if (isStudent)
		{
			var courseIdAsString = user.FindFirst("CourseId")?.Value ?? null;
			if (courseIdAsString != null) await InvokeAsync(() => Navigation.NavigateTo($"courses/{courseIdAsString}"));
		}
		else
		{
			await InvokeAsync(() => Navigation.NavigateTo("/account/login"));
		}
	}

	private async Task LoadCourse()
	{

		var response = await myApi.CallApiGetAsync<IEnumerable<CourseDto>>("courses");
		Courses = response?.ToList();

	}

	private void ToggleAddCourse()
	{
		isAdding = !isAdding;
	}


    // New method to handle the event when a course is added CourseList.razor is parent to CourseAddComponent.razor
	private void HandleCourseAdded(CourseDto newCourse)
	{
        Courses.Add(newCourse);
        StateHasChanged();
	}


	private async Task DeleteCourse(CourseDto courseToDelete)
	{
		if (courseToDelete == null) return;

		try
		{
			var success = await myApi.CallApiDeleteAsync($"courses/{courseToDelete.Id}");
			if (success)
			{
				// Ta bort från listan så UI uppdateras
				Courses.Remove(courseToDelete);
				StateHasChanged();
			}
			else
			{
				Console.WriteLine("Delete failed: API returned false");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Delete failed: {ex.Message}");
		}
	}
}
