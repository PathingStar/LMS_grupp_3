@page "/courses/{Id:guid}"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveWebAssembly

@attribute [Authorize]

<h3>@(currentCourse?.Name ?? "Kurs")</h3>

@if (loading)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status"></div>
        <p>Laddar kursdata...</p>
    </div>
}
else if (currentCourse is null)
{
    <div class="alert alert-warning">Kursen kunde inte laddas.</div>
}
else
{
    <div class="row gx-4">
        <!-- Left-Column: Kursinfo + Dokument -->
        <div class="col-12 col-lg-7">
            <section class="mb-4">
                <p>@currentCourse.Description</p>
                <small class="text-muted">
                    Start: @currentCourse.StartDate.ToString("yyyy-MM-dd") &nbsp;|&nbsp; Slut: @currentCourse.EndDate.ToString("yyyy-MM-dd")
                </small>
            </section>

            <AuthorizeView Roles="Teacher">
                <button class="btn btn-outline-primary mb-3" @onclick="ToggleEditCourse">
                    @(isEditingCourse ? "Avbryt redigering" : "Redigera kurs")
                </button>
            </AuthorizeView>

            @if (isEditingCourse)
            {
                <CourseEditComponent CourseDto="@currentCourse" OnEditDone="RefreshCourse" />
            }

            <hr />

            <section>
                <h5>Dokument</h5>                
                    <DocumentComponent Documents="@documentDtos" OnEditRequested="EditDocument" />
                <AuthorizeView Roles="Teacher">
                    <DocumentAddComponent ParentId="@Id" ParentType="Course" OnUploadSuccess="HandleUploadSuccess" />
                </AuthorizeView>
            </section>
        </div>

        <!-- Right-Column: Moduler + Deltagare in a box -->
        <div class="col-12 col-lg-5">
            <div class="p-3 border rounded shadow-sm bg-white sticky-top" style="top: 1rem;">
                <section class="mb-4">
                    <h5>Moduler</h5>

                    <AuthorizeView Roles="Teacher">
                        <ModuleAddComponent CourseId="@Id"
                                            CourseStart="@currentCourse.StartDate.Date"
                                            CourseEnd="@currentCourse.EndDate.Date"
                                            OnModuleAdded="AddModule" />
                    </AuthorizeView>

                    @if (modules?.Any() == true)
                    {
                        <ul class="list-group mt-2">
                            @foreach (var module in modules)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div @onclick="() => NavigateToModule(module.Id)"
                                         style="cursor: pointer; color: inherit;">
                                        <strong style="color: darkslateblue;">
                                            @module.Name
                                        </strong>
                                        <br />
                                        <small class="text-muted" style="font-size: 0.75rem;">
                                            Start: @currentCourse.StartDate.ToString("yyyy-MM-dd")
                                            &nbsp;|&nbsp;
                                            Slut: @currentCourse.EndDate.ToString("yyyy-MM-dd")
                                        </small>
                                    </div>
                                    @if (isEditingModule && currentModuleGuid == module.Id)
                                    {
                                        <AuthorizeView Roles="Teacher">
                                            <ModuleEditComponent Module="module"
                                                                 CurrentCourseId="@currentCourse.Id"
                                                                 CourseStart="@currentCourse.StartDate.Date"
                                                                 CourseEnd="@currentCourse.EndDate.Date"
                                                                 OnEditDone="StopEditingModule"
                                                                 @key="module.Id" />
                                        </AuthorizeView>
                                    }
                                    else
                                    {
                                        <AuthorizeView Roles="Teacher">
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => StartEditingModule(module.Id)">Redigera</button>

                                            <ConfirmDelete ButtonText="Delete"
                                                           Title="Confirm Delete"
                                                           Message="Are you sure you want to delete this module?"
                                                           OnConfirm="() => DeleteModule(module.Id)" />
                                        </AuthorizeView>
                                    }
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted mt-2">Inga moduler tillagda än.</p>
                    }
                </section>

                <hr />

                <section>
                    <h5>Deltagare</h5>
                    @if (members?.Any() == true)
                    {
                        <ul class="list-group">
                            @foreach (var member in members)
                            {
                                <li class="list-group-item">@member.Email</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">Inga deltagare tillagda.</p>
                    }
                </section>
            </div>
        </div>
    </div>

    @if (isEditingDocument && editingDocumentId is Guid docId)
    {
        @DocumentEditModal(docId)
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Inject] private IApiService ApiService { get; set; } = default!;
    [Inject] private AuthenticationStateProvider AuthProvider { get; set; } = default!;

    private bool loading = true;

    private string? errorMessage;
    private CourseDto? currentCourse;
    private List<ModuleDto>? modules;
    private List<UserDto>? members;
    private List<DocumentDto> documentDtos = new();

    private bool isEditingCourse = false;
    private bool isEditingModule = false;
    private Guid? currentModuleGuid;

    private bool isEditingDocument = false;
    private Guid? editingDocumentId;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        if (!(authState.User.Identity?.IsAuthenticated ?? false))
        {
            Navigation.NavigateTo("/account/login");
            return;
        }

        await LoadCourseDataAsync();
        loading = false;
    }

    private async Task LoadCourseDataAsync()
    {
        try
        {
            currentCourse = await ApiService.CallApiGetAsync<CourseDto>($"courses/{Id}");
            modules = (await ApiService.CallApiGetAsync<IEnumerable<ModuleDto>>($"modules/course/{Id}"))?.ToList() ?? new();
            members = (await ApiService.CallApiGetAsync<IEnumerable<UserDto>>($"users/course/{Id}"))?.ToList() ?? new();
            documentDtos = (await ApiService.CallApiGetAsync<IEnumerable<DocumentDto>>($"documents/course/{Id}"))?.ToList() ?? new();
        }
        catch (HttpRequestException apiEx)
        {
            errorMessage = $"API Error: {apiEx.StatusCode} - {apiEx.Message}";
            Console.WriteLine("there was an API error: " + apiEx.Message);
        }

        catch (Exception ex)
        {
            Console.Error.WriteLine($"Fel vid inläsning av kursdata: {ex.Message}");
            currentCourse = null;
        }
    }

    private void ToggleEditCourse()
    {
        isEditingCourse = !isEditingCourse;
    }

    private void RefreshCourse(CourseDto updatedCourse)
    {
        isEditingCourse = false;
        if (currentCourse is not null && currentCourse.Id == updatedCourse.Id)
        {
            currentCourse.Name = updatedCourse.Name;
            currentCourse.Description = updatedCourse.Description;
            currentCourse.StartDate = updatedCourse.StartDate;
            currentCourse.EndDate = updatedCourse.EndDate;
        }
        StateHasChanged();
    }

    private void StartEditingModule(Guid moduleId)
    {
        isEditingModule = true;
        currentModuleGuid = moduleId;
    }

    private void StopEditingModule(ModuleDto updatedModule)
    {
        // isEditingModule = false;
        // currentModuleGuid = null;

        var moduleToUpdate = modules?.FirstOrDefault(m => m.Id == updatedModule.Id);
        if (moduleToUpdate is not null)
        {
            moduleToUpdate.Name = updatedModule.Name;
            moduleToUpdate.Description = updatedModule.Description;
            moduleToUpdate.StartDate = updatedModule.StartDate;
            moduleToUpdate.EndDate = updatedModule.EndDate;
        }

        isEditingModule = false;
        currentModuleGuid = null;
        StateHasChanged();
    }

    private void AddModule(ModuleDto newModule)
    {
        modules ??= new List<ModuleDto>();
        modules.Add(newModule);
        StateHasChanged();
    }

    private void EditDocument(Guid documentId)
    {
        editingDocumentId = documentId;
        isEditingDocument = true;
    }

    private void CloseDocumentEdit()
    {
        isEditingDocument = false;
        editingDocumentId = null;
    }

    private async Task OnDocumentSaved(DocumentDto updatedDoc)
    {
        var existing = documentDtos.FirstOrDefault(d => d.Id == updatedDoc.Id);
        if (existing is not null)
        {
            existing.Name = updatedDoc.Name;
            existing.Description = updatedDoc.Description;
        }
        CloseDocumentEdit();
        await InvokeAsync(StateHasChanged);
    }

    private void HandleUploadSuccess(DocumentDto newDoc)
    {
        documentDtos.Add(newDoc);
        StateHasChanged();
    }

    private RenderFragment DocumentEditModal(Guid documentId) => __builder =>
    {
        <div class="modal-backdrop fade show"></div>
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content p-3">
                    <button type="button" class="btn-close float-end" aria-label="Close" @onclick="CloseDocumentEdit"></button>
                    <DocumentEditComponent DocumentId="@documentId"
                                           OnSaved="OnDocumentSaved"
                                           OnCancel="CloseDocumentEdit"
                                           OnDeleted="OnDocumentDeleted" />
                </div>
            </div>
        </div>
    };

    private async Task DeleteModule(Guid moduleId)
    {
        try
        {
            await ApiService.CallApiDeleteAsync($"modules/{moduleId}");
            modules?.RemoveAll(m => m.Id == moduleId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Fel vid borttagning av modul: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task DeleteDocument(Guid docId)
    {
        try
        {
            await ApiService.CallApiDeleteAsync($"documents/{docId}");
            documentDtos.RemoveAll(d => d.Id == docId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Fel vid borttagning av dokument: {ex.Message}");
        }
        StateHasChanged();
    }




    private async Task OnDocumentDeleted(Guid docId)
    {
        documentDtos.RemoveAll(d => d.Id == docId);
        CloseDocumentEdit();
        await InvokeAsync(StateHasChanged);
    }





    private void NavigateToModule(Guid moduleId)
    {
        Navigation.NavigateTo($"/modules/{moduleId}");
    }
}
