@page "/courses/{Id}"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveWebAssembly

@attribute [Authorize]

<div class="container-fluid">
    <div class="row">
        <!-- L Sidebar area -->
        <div class="col-12 col-lg-3 border-end bg-light">
            <div >
                <DocumentComponent Documents="@DocumentDtos" />

            </div>
        </div>
        <!-- Main content area -->
        <div class="col-12 col-lg-6">
            <h3>Kurs @CurrentCourse?.Name</h3>
            <p>@CurrentCourse?.Description</p>
            <div class="row">
                <div class="col-12 col-lg-9">
                    @if (Modules != null)
                    {
                        @foreach (var module in Modules)
                        {
                            @if (isEditingModule && CurrentModuleGuid == module.Id)
                            {
                                <ModuleEditComponent OnMessageSent="StopEditing" Module=module />

                            }
                            else
                            {
                                <ModuleComponent OnMessageSent="StartEditing" Module=module />
                            }
                        }
                    }
    
                </div>
            </div>
        </div>

        <!-- R Sidebar area -->
        <div class="col-12 col-lg-3 border-start bg-light">
            <div class="p-3 sticky-top">
                @if (Members != null)
                {
                    @foreach (var member in Members)
                    {
                        <MemberComponent Member=member />
                    }
                }
            </div>
        </div>
    </div>
    
</div>
@* 
    <!-- ParentComponent.razor -->
<ChildComponent OnMessageSent="HandleMessage" />

<p>@messageFromChild</p>
*@

@code {
    [SupplyParameterFromQuery]
    [Parameter] public string Id { get; set; }

    private bool isEditingModule { get; set; } = false;
    private Guid? CurrentModuleGuid { get; set; } = null!;

    private void StopEditing()
    {
        isEditingModule = false;
        CurrentModuleGuid = null;
    }
    private void StartEditing(Guid myId)
    {
        isEditingModule = true;
        CurrentModuleGuid = myId;
    }

    public bool Loading { get; set; } = true;

    [Inject]
    private IApiService myApi { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider Auth { get; set; } = default!;

    private CourseDto? CurrentCourse { get; set; }
    private IEnumerable<ModuleDto>? Modules { get; set; }
    private IEnumerable<UserDto>? Members { get; set; }
	private List<DocumentDto> DocumentDtos { get; set; } = new List<DocumentDto>();

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        var state = await Auth.GetAuthenticationStateAsync();

        if (!(state.User.Identity?.IsAuthenticated) ?? false)
        {
            return;
        }
        await LoadCourse();
        Loading = false;

    }

    private async Task LoadCourse()
    {
        try
        {

            var response = await myApi.CallApiGetAsync<CourseDto>($"courses/{Id}");
            CurrentCourse = (CourseDto)response;


            var respModule = await myApi.CallApiGetAsync<IEnumerable<ModuleDto>>($"modules/course/{Id}");
            Modules = respModule?.ToList();

            var respMembers = await myApi.CallApiGetAsync<IEnumerable<UserDto>>($"users/course/{Id}");
            Members = respMembers?.ToList();

			var respDocs = await myApi.CallApiGetAsync<IEnumerable<DocumentDto>>($"documents/course/{Id}");
			DocumentDtos = respDocs?.ToList() ?? new List<DocumentDto>();



        }
        catch (Exception ex)
        {
            Console.WriteLine("there was an error: " + ex.Message);
        }
    }

}
