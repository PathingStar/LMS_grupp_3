@page "/courses/{Id:guid}"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveWebAssembly

@attribute [Authorize]

<div class="container-fluid">
	<div class="row">
		<!-- L Sidebar area -->
		<div class="col-12 col-lg-3 border-end bg-light">
			<div>
				<DocumentComponent Documents="@DocumentDtos" />
				<DocumentAddComponent ParentId=Id ParentType="Course"/>

            </div>
        </div>
        <!-- Main content area -->
        <div class="col-12 col-lg-6">
            <h3>Kurs @CurrentCourse?.Name</h3>
            <p>@CurrentCourse?.Description</p>

            <button type="cancel" class="btn btn-primary" @onclick="EditCourse">Change course</button>

            @if(isEditingCourse){
                <CourseEditComponent CourseDto="@CurrentCourse" OnEditDone="Refresh" />
            }
 
            <div class="row">
                <div class="col-12 col-lg-9">
					<ModuleAddComponent CourseId=Id/>
					@if (Modules != null)
                    {
                        @foreach (var module in Modules)
                        {
                            @if (isEditingModule && CurrentModuleGuid == module.Id)
                            {
                                <ModuleEditComponent OnEditDone="StopEditing" Module=module currentCourseId="@CurrentCourse.Id" />
                            }
                            else
                            {
                                <ModuleComponent OnMessageSent="StartEditing" Module=module />
                            }
                        }
                    }
    
                </div>
            </div>
        </div>

		<!-- R Sidebar area -->
		<div class="col-12 col-lg-3 border-start bg-light">
			<div class="p-3 sticky-top">
				@if (Members != null)
				{
					@foreach (var member in Members)
					{
						<MemberComponent Member=member />
					}
				}
			</div>
		</div>
	</div>

</div>

@code {
	[SupplyParameterFromQuery]
	[Parameter] public Guid Id { get; set; }

    private bool isEditingCourse { get; set; } = false;
    private bool isEditingModule { get; set; } = false;
    private Guid? CurrentModuleGuid { get; set; } = null!;

    private void EditCourse()
    {
        isEditingCourse = !isEditingCourse;
    }

    private void StopEditing(ModuleDto dto)
    {
        isEditingModule = false;
        CurrentModuleGuid = null;

		//Försök till instant refresh
		ModuleDto? x = Modules.SingleOrDefault(o => o.Id == dto.Id);
		if (x != null)
		{
			x.Name = dto.Name;
			x.StartDate = dto.StartDate;
			x.EndDate = dto.EndDate;
		}
		StateHasChanged();
	}
	private void StartEditing(Guid myId)
	{
		isEditingModule = true;
		CurrentModuleGuid = myId;
	}

	public bool Loading { get; set; } = true;

	[Inject]
	private IApiService myApi { get; set; } = default!;

	[Inject]
	private AuthenticationStateProvider Auth { get; set; } = default!;

	private CourseDto? CurrentCourse { get; set; }
	private IEnumerable<ModuleDto>? Modules { get; set; }
	private IEnumerable<UserDto>? Members { get; set; }
	private List<DocumentDto> DocumentDtos { get; set; } = new List<DocumentDto>();

	protected override async Task OnInitializedAsync()
	{
		Loading = true;
		var state = await Auth.GetAuthenticationStateAsync();

		if (!(state.User.Identity?.IsAuthenticated) ?? false)
		{
			return;
		}
		await LoadCourse();
		Loading = false;

    }
    private void Refresh(CourseDto dto)
    {
        isEditingCourse = false;
        if (CurrentCourse != null && CurrentCourse.Id == dto.Id)
        {
            CurrentCourse.Name = dto.Name;
            CurrentCourse.Description = dto.Description;
            CurrentCourse.StartDate = dto.StartDate;
            CurrentCourse.EndDate = dto.EndDate;
        }
		isEditingCourse = false;
        StateHasChanged();
	}

	private async Task LoadCourse()
	{
		try
		{

			var response = await myApi.CallApiGetAsync<CourseDto>($"courses/{Id}");
			CurrentCourse = (CourseDto)response;


			var respModule = await myApi.CallApiGetAsync<IEnumerable<ModuleDto>>($"modules/course/{Id}");
			Modules = respModule?.ToList();

			var respMembers = await myApi.CallApiGetAsync<IEnumerable<UserDto>>($"users/course/{Id}");
			Members = respMembers?.ToList();

			var respDocs = await myApi.CallApiGetAsync<IEnumerable<DocumentDto>>($"documents/course/{Id}");
			DocumentDtos = respDocs?.ToList() ?? new List<DocumentDto>();



		}
		catch (Exception ex)
		{
			Console.WriteLine("there was an error: " + ex.Message);
		}
	}

}
