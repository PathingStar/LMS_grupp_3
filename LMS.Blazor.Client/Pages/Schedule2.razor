@page "/schedule"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.EntityDTO
@using LMS.Shared.DTOs.EntityDto
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveWebAssembly

<h3>CourseList</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger" role="alert">
		<p>@errorMessage</p>
	</div>
}

@if (CourseId != null)
{
	@* <Radzen.Blazor.RadzenScheduler Data="@MySchedule.Events"
								 StartProperty="Start"
								 EndProperty="End"
								 TextProperty="Text"
								 View="Month"
							   TItem="ScheduleEvent">
	</Radzen.Blazor.RadzenScheduler> *@
	 <table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Description</th>
				<th>Start Date</th>
				<th>End Date</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var course in Courses)
			{
				<tr>
					<td @onclick="() => NavigateToCourse(course.Id)" style="cursor:pointer">@course.Name</td>
					<td>@course.Description</td>
					<td>@course.StartDate</td>
					<td>@course.EndDate</td>
					<td>
						<ConfirmDelete Title="Delete Course"
									   Message="Are you sure?"
									   OnConfirm="() => DeleteCourse(course)"
									   ButtonText="Delete" />
					</td>
				</tr>
			}
		</tbody>
	</table> 
}

@code
{

	[Inject]
	private IApiService myApi { get; set; } = default!;



	private List<CourseDto>? Courses { get; set; }
	private string? errorMessage;
	private ScheduleDto MySchedule { get; set; } = new();
	private string CourseId = null;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var isTeacher = user.IsInRole("Teacher");
		var isStudent = user.IsInRole("Student");
		if (isTeacher)
		{
			await LoadCourse();
		}
		else if (isStudent)
		{
			CourseId = user.FindFirst("CourseId")?.Value ?? null;
		}
		else
		{
			await InvokeAsync(() => Navigation.NavigateTo("/account/login"));
		}
		MySchedule = await myApi.CallApiGetAsync<ScheduleDto>($"schedules/{CourseId}");
		Console.WriteLine($"Schedule has {MySchedule.Modules.Count} modules.");
	}

	private async Task LoadCourse()
	{
		try
		{
			var response = await myApi.CallApiGetAsync<IEnumerable<CourseDto>>("courses");
			Console.WriteLine($"Found {response?.Count()} courses.");
			Courses = response?.ToList();
			CourseId = response?.ToList()[0].Id.ToString();
		}
		catch (HttpRequestException apiEx)
		{
			errorMessage = $"API Error: {apiEx.StatusCode} - {apiEx.Message}";
			Console.WriteLine("there was an API error: " + apiEx.Message);
		}


	}

	// New method to handle the event when a course is added CourseList.razor is parent to CourseAddComponent.razor
	private void HandleCourseAdded(CourseDto newCourse)
	{
		Courses.Add(newCourse);
		StateHasChanged();
	}

	private void NavigateToCourse(Guid courseId)
	{
		Navigation.NavigateTo($"/courses/{courseId}");
	}


	private async Task DeleteCourse(CourseDto courseToDelete)
	{
		if (courseToDelete == null) return;

		try
		{
			var success = await myApi.CallApiDeleteAsync($"courses/{courseToDelete.Id}");
			if (success)
			{
				// Ta bort från listan så UI uppdateras
				Courses.Remove(courseToDelete);
				StateHasChanged();
			}
			else
			{
				Console.WriteLine("Delete failed: API returned false");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Delete failed: {ex.Message}");
		}
	}
}