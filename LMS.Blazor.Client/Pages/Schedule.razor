
@using LMS.Shared.DTOs.EntityDTO

@using LMS.Blazor.Client.Services

@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider Auth
@rendermode InteractiveWebAssembly

<PageTitle>Schedule</PageTitle>

<h3>Course Schedule</h3>

@* <RadzenScheduler Data="@Events"
                 StartProperty="Start"
                 EndProperty="End"
                 TextProperty="Text"
                 View="Month"
                 TItem="ScheduleEvent">
</RadzenScheduler> *@

@code {
    [Inject]
    private IApiService myApi { get; set; } = default!;
    private string CourseId;

    // Event class for the scheduler
    public class ScheduleEvent
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    private List<ScheduleEvent> Events = new();
    private bool Loading = true;

    private ScheduleDto MySchedule { get; set; } = new();

    // This is just an example of loading your schedule — in real life you probably get it from your API
    private bool hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasLoaded)
        {
            hasLoaded = true;
            await OnInitializedAsync(); // Retry now that client is ready
            StateHasChanged();
        }
    }


    private async Task HandleTeacher()
    {
        try
        {
            
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error fetching courses: {ex.Message}");
        }
    }

    private void HandleStudent(System.Security.Claims.ClaimsPrincipal user)
    {
        CourseId = user.Claims.FirstOrDefault(c => c.Type == "CourseId")?.Value;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        var user = authState.User;
        var isTeacher = user.IsInRole("Teacher");
        var isStudent = user.IsInRole("Student");
        if (isTeacher)
        {
            var response = await myApi.CallApiGetAsync<IEnumerable<CourseDto>>("courses");

            Console.WriteLine($"Found {response?.Count()} courses.");
            CourseId = response?.ToList()[0].Id.ToString();
            Console.WriteLine($"Using CourseId: {CourseId}");
        }
        else if (isStudent)
        {
            HandleStudent(user);
        }
        else
        {
            await InvokeAsync(() => Navigation.NavigateTo("/account/login"));
        }
        
        MySchedule = await myApi.CallApiGetAsync<ScheduleDto>($"schedules/b4ffc775-3855-44da-d258-08ddebc527a7");

        
        // Add the course start as an event
        Events.Add(new ScheduleEvent
        {
            Start = MySchedule.StartDate,
            End = MySchedule.StartDate.AddHours(1),
            Text = $"Course: {MySchedule.Course.Name}"
        });

        // Add each module
        foreach (var module in MySchedule.Modules)
        {
            Events.Add(new ScheduleEvent
            {
                Start = module.StartDate,
                End = module.StartDate.AddHours(1),
                Text = $"Module: {module.Name}"
            });

            // Add each activity
            foreach (var activity in module.ModuleActivities)
            {
                Events.Add(new ScheduleEvent
                {
                    Start = activity.StartDate,
                    End = activity.StartDate.AddHours(1),
                    Text = $"Activity: {activity.Name}"
                });
            }
        }
    }
}