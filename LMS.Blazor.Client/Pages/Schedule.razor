@page "/schedule"
@using Radzen
@using Radzen.Blazor
@using LMS.Shared.DTOs.EntityDTO
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveWebAssembly

<h3>Schedule</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger" role="alert">
		<p>@errorMessage</p>
	</div>
}

@if (Events != null && Events.Count > 0)
{
	<RadzenScheduler Data="@Events"
					 StartProperty="Start"
					 EndProperty="End"
					 TextProperty="Text"
					 AppointmentRender="@OnAppointmentRender">

		<RadzenMonthView />
		<RadzenWeekView />
		<RadzenDayView />


	</RadzenScheduler>


}
<p>test</p>

@code
{
	[Inject]
	private IApiService myApi { get; set; } = default!;

	
	private List<AppointmentData> Events = new();

	private List<CourseDto>? Courses { get; set; }
	private string? errorMessage;
	private ScheduleDto MySchedule { get; set; }
	private string CourseId = null;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var isTeacher = user.IsInRole("Teacher");
		var isStudent = user.IsInRole("Student");
		if (isTeacher)
		{
			await LoadCourse();
		}
		else if (isStudent)
		{
			CourseId = user.FindFirst("CourseId")?.Value ?? null;
		}
		else
		{
			await InvokeAsync(() => Navigation.NavigateTo("/account/login"));
		}
		MySchedule = await myApi.CallApiGetAsync<ScheduleDto>($"schedules/{CourseId}");
		if (MySchedule == null) return;

		FlattenScheduleDto(MySchedule);
	}
	private void FlattenScheduleDto(ScheduleDto schedule)
	{
		Events.Add(new AppointmentData
		{
			Start = schedule.Course.StartDate,
			End = schedule.Course.EndDate,
			Text = $"Course start: {schedule.Course.Name}"
		});
		if (schedule.Modules != null && schedule.Modules.Count > 0)
			foreach (var module in schedule.Modules)
			{
				Events.Add(new AppointmentData
				{
					Start = module.StartDate,
					End = module.EndDate,
					Text = $"Module: {module.Name}"
				});
			}
		if (schedule.ModuleActivities != null && schedule.ModuleActivities.Count > 0)
			foreach (var act in schedule.ModuleActivities)
			{
				Events.Add(new AppointmentData
				{
					Start = act.StartDate,
					End = act.EndDate,
					Text = $"Activity: {act.Name}"
				});
			}
		foreach (var e in Events)
			Console.WriteLine($"Event: {e.Text}, {e.Start} - {e.End}");
	}

	private async Task LoadCourse()
	{
		try
		{
			var response = await myApi.CallApiGetAsync<IEnumerable<CourseDto>>("courses");
			Console.WriteLine($"Found {response?.Count()} courses.");
			Courses = response?.ToList();
			CourseId = response?.ToList()[0].Id.ToString();
		}
		catch (HttpRequestException apiEx)
		{
			errorMessage = $"API Error: {apiEx.StatusCode} - {apiEx.Message}";
			Console.WriteLine("there was an API error: " + apiEx.Message);
		}


	}
	public void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentData> args)
	{
        
		if (args.Data.Text.StartsWith("Course"))
		{
			args.Attributes["style"] = "background: #4CAF50; color: white"; // green
		}
		else if (args.Data.Text.StartsWith("Module"))
		{
			args.Attributes["style"] = "background: #2196F3; color: white"; // blue
		}
		else if (args.Data.Text.StartsWith("Activity"))
		{
			args.Attributes["style"] = "background: #F44336; color: white"; // red
		}
	}
}
